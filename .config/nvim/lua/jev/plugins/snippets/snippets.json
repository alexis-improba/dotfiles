{
	"Create HTMLElement": {
		"prefix": "de",
		"body": ["document.createElement('$1')"],
		"description": "Create a new HTMLElement"
	},
	"Console log": {
		"prefix": "cl",
		"body": ["console.log($1)"],
		"description": "Console stuff to the console"
	},
	"Log console": {
		"prefix": "lc",
		"body": ["console.log($1)"],
		"description": "Console stuff to the console"
	},
	"Log": {
		"prefix": "log",
		"body": ["console.log($1)"],
		"description": "Console stuff to the console"
	},
	"Create arrow function": {
		"prefix": "caf",
		"body": ["const ${1:function} = () => {\n}"],
		"description": "Create a const arrow function"
	},
	"Creatwe arrow function and export default": {
		"prefix": "cafed",
		"body": ["const ${1:function} = () => {\n\n} \n\nexport default ${1:function};"],
		"description": "Create a arrow function and export as default"
	},
	"Create arrow function and export": {
		"prefix": "cafe",
		"body": ["export const ${1:function} = () => {\n\n}"],
		"description": "Create a const arrow function"
	},
	"init a tsx file": {
		"prefix": "inittsxi",
		"body": [
			"interface I${1: const name}Props {",
			"  ${2: first props} : ${3: props type}",
			"}",
			"",
			"const ${1: const name} : React.FC<I${1: const name}Props> = ({${2: first props}}) => {",
			"  return (<${4: tag name}>$5</${4: tag name}>);",
			"}",
			"",
			"export default ${1: const name};"
		],
		"description": "init a tsx file"
	},
	"init a tsx file without interface": {
		"prefix": "inittsx",
		"body": [
			"const ${1: const name} : React.FC = () => {",
			"  return (<${4: tag name}>$5</${4: tag name}>);",
			"}",
			"",
			"export default ${1: const name};"
		],
		"description": "init a tsx file"
	},
	"use effect without return": {
		"prefix": "ee",
		"body": [
			"useEffect(() => {",
			"		$1;",
			"}, [$2]);",
		],
		"description": "useEffect without return"
	},
	"interface": {
		"prefix": "int",
		"body": [
			"interface I${1: const name} {",
			"  ${2: first attribute} : ${3: attribute type}",
			"}",
		],
		"description": "create basic interface"
	},
	"interface with props": {
		"prefix": "intp",
		"body": [
			"interface I${1: const name}Props {",
			"  ${2: first props} : ${3: props type}",
			"}",
		],
		"description": "create basic interface"
	},
	// THREE JS
	"Add element to scene": {
		"prefix": "sa",
		"body": ["scene.add(${1:element});"],
		"description": "Add element to Three JS scene"
	},
	"Create new element": {
		"prefix": "cn",
		"body": ["const ${1:element} = new THREE.${2:constructor};"],
		"description": "Create new THREE element"
	},
	"Create new element and add to scene": {
		"prefix": "cna",
		"body": ["const ${1:element} = new THREE.${2:constructor}($3);\nscene.add(${1:element});"],
		"description": "Create new THREE element and add to scene"
	},
	"Add gui setting": {
		"prefix": "gu",
		"body": ["gui.add(${2:element}, '${3:setting}').min(${4:-1}).max(${5:1}).step(${6:0.001})"],
		"description": "Create new THREE element and add to scene"
	}
}
